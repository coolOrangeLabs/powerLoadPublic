name: Release
on:
  workflow_dispatch:
env:
  SOURCE_REPO: coolorangeLabs/powerLoad   # <== change to your private repo
  MSI_PATTERN: '*.msi'  # <== optional: filter if multiple assets

jobs:
  build:

    runs-on: windows-2025

    steps:
    - name: Generate token
      uses: actions/create-github-app-token@v1
      id: generate_token
      with:
        app-id: ${{ vars.APP_ID }}
        private-key: ${{ secrets.PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}
    

    - name: Checkout source repo
      uses: actions/checkout@v4
      with:
        repository: coolOrangeLabs/powerLoad
        token: ${{ secrets.SOURCE_REPO_TOKEN }}
        path: source-repo

    - name: Get latest release from powerLoad Repo
      id: get_release
      shell: pwsh
      run: |
          $headers = @{ Authorization = "token ${{ steps.generate_token.outputs.token }}" }
          $url = "https://api.github.com/repos/${{ env.SOURCE_REPO }}/releases/latest"
          $response = Invoke-RestMethod -Uri $url -Headers $headers

          # Find the first asset that matches MSI
          $asset = $response.assets | Where-Object { $_.name -like "${{ env.MSI_PATTERN }}" } | Select-Object -First 1

          if (-not $asset) { 
            Write-Error "No MSI asset found in latest release of ${{ env.SOURCE_REPO }}" 
            exit 1 
          }

          echo "asset_url=$($asset.url)" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "asset_name=$($asset.name)" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "tag_name=$($response.tag_name)" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "release_name=$($response.name)" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Download MSI from Repo B
      shell: pwsh
      run: |
          Invoke-RestMethod `
            -Uri $env:asset_url `
            -Headers @{
              Authorization = "token ${{ steps.generate_token.outputs.token }}"
              Accept        = "application/octet-stream"
            } `
            -OutFile $env:asset_name

    - name: Create GitHub Release and Upload Asset
      uses: softprops/action-gh-release@v1
      with:
          tag_name: ${{ env.tag_name }}
          name: Release ${{ env.release_name }}
          draft: true
          prerelease: false
          files: ${{ env.asset_name }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
    - name: Checkout target repo
      uses: actions/checkout@v4
      with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: target-repo

    - name: Copy documentation to New Repository
      shell: pwsh
      run: |
          copy-item ${{ github.workspace }}\source-repo\README.md ${{ github.workspace }}\target-repo\README.md -Force
          copy-item ${{ github.workspace }}\source-repo\CmdLets\doc\*.md ${{ github.workspace }}\target-repo\CmdLets\doc\ -Force
      working-directory: .

    - name: Commit docuemntation changes
      run: |
          git config user.name "Marco Mirandola"
          git config user.email "marco.mirandola@coolorange.com"
          git add .
          git commit -m "Update documentation"
          git push origin main
      working-directory: target-repo

